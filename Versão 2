import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import javax.imageio.ImageIO;

// Classe que representa o fluxo de água
class FluxoAgua {
    private double vazao; // m³/h
    private double acumulado; // m³

    public FluxoAgua(double vazaoInicial) {
        this.vazao = vazaoInicial;
        this.acumulado = 0;
    }

    public void setVazao(double vazao) {
        this.vazao = vazao;
    }

    public double getVazao() {
        return vazao;
    }

    public double getAcumulado() {
        return acumulado;
    }

    // Simula passagem de tempo em segundos
    public void simularSegundos(int segundos) {
        if (vazao > 0) {
            double m3PorSegundo = vazao / 3600.0; // converte de m³/h para m³/s
            acumulado += m3PorSegundo * segundos;
        }
    }
}

// Classe que exibe dados no "display" (console)
class Display {
    public void mostrar(FluxoAgua fluxo) {
        System.out.printf("Vazão atual: %.2f m³/h | Acumulado: %.3f m³%n",
                fluxo.getVazao(), fluxo.getAcumulado());
    }
}

// Classe responsável por gerar relatório em arquivo
class Relatorio {
    public void salvar(double volume) {
        try (FileWriter fw = new FileWriter("relatorio.txt", true)) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String dataHora = LocalDateTime.now().format(dtf);
            fw.write(dataHora + " - Volume acumulado: " + String.format("%.3f m³", volume) + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

// Classe que gera imagem PNG a cada m³
class GeradorImagem {
    private int contador = 0;

    public void gerar(double volume) {
        contador++;
        String nomeArquivo = "hidrometro_" + contador + ".png";

        int largura = 400;
        int altura = 200;

        BufferedImage img = new BufferedImage(largura, altura, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();

        // Fundo
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, largura, altura);

        // Texto principal
        g2d.setColor(Color.BLUE);
        g2d.setFont(new Font("Arial", Font.BOLD, 20));
        g2d.drawString("Simulação de Hidrômetro", 50, 50);

        g2d.setColor(Color.BLACK);
        g2d.setFont(new Font("Consolas", Font.PLAIN, 18));
        g2d.drawString("Volume acumulado:", 50, 100);
        g2d.setFont(new Font("Consolas", Font.BOLD, 22));
        g2d.drawString(String.format("%.3f m³", volume), 220, 100);

        g2d.dispose();

        try {
            ImageIO.write(img, "png", new File(nomeArquivo));
            System.out.println("Imagem gerada: " + nomeArquivo);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

// Classe principal que orquestra tudo
public class HidrometroSimulador {
    public static void main(String[] args) throws InterruptedException {
        FluxoAgua fluxo = new FluxoAgua(100); // vazão inicial em m³/h
        Display display = new Display();
        Relatorio relatorio = new Relatorio();
        GeradorImagem geradorImagem = new GeradorImagem();

        double ultimoVolume = 0;

        System.out.println("Simulação iniciada. Pressione CTRL+C para parar.");

        // Simulação contínua (loop infinito)
        while (true) {
            fluxo.simularSegundos(1);
            display.mostrar(fluxo);
            relatorio.salvar(fluxo.getAcumulado());

            // a cada 1 m³ acumulado gera uma imagem
            if ((int) fluxo.getAcumulado() > (int) ultimoVolume) {
                geradorImagem.gerar(fluxo.getAcumulado());
            }

            ultimoVolume = fluxo.getAcumulado();

            Thread.sleep(1000); // 1 segundo = simulação em tempo real
        }
    }
}
